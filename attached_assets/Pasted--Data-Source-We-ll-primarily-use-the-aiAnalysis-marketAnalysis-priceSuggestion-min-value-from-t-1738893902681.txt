. Data Source:

We'll primarily use the aiAnalysis.marketAnalysis.priceSuggestion.min value from the Gemini API. This represents the lower end of the suggested selling price range. We'll apply a discount to this to get a reasonable purchase price.

We can optionally incorporate eBay data. If we have ebayData.averagePrice, we can use that as an additional data point, but the AI's minimum suggested selling price will be our primary driver.

2. Calculation Logic:

We'll need a function to calculate the suggested purchase price. Here's a reasonable approach:

Base: Start with aiAnalysis.marketAnalysis.priceSuggestion.min.

Discount: Apply a discount percentage. This represents your desired profit margin + room for negotiation. A good starting point might be 30-40%, but this is configurable. Let's start with 35%. So, we'll multiply the minimum suggested selling price by (1 - 0.35) = 0.65.

eBay Data (Optional): If ebayData.averagePrice is available and lower than the AI's discounted price, we could consider using it, but we need to be careful. The eBay average price might include new items, so it's not a perfect comparison. We'll include an option for this, but I'll recommend against using it initially.

Rounding: Round to the nearest cent (or dollar, depending on the typical price range of your items).

3. UI Integration:

ProductCard (Watchlist View): We'll add a new display field to the ProductCard component only when inWatchlist is true. This field will show the "Suggested Purchase Price".

No Editing: This value should not be directly editable in the ProductCard. It's a calculated value.

"Convert to Inventory" Dialog: The "Convert to Inventory" dialog will remain largely the same, but the "Buy Price" field will no longer be pre-filled with a potentially irrelevant value. The user must enter their actual purchase price.

4. Code Modifications:

client/src/components/product-card.tsx:

// Inside the ProductCard component, BEFORE the return statement:

const calculateSuggestedPurchasePrice = (aiAnalysis: any) => {
    if (!aiAnalysis || !aiAnalysis.marketAnalysis || !aiAnalysis.marketAnalysis.priceSuggestion) {
        return null; // Or some other suitable default, like "N/A"
    }

    const minSellPrice = aiAnalysis.marketAnalysis.priceSuggestion.min;
    if (typeof minSellPrice !== 'number' || isNaN(minSellPrice)) {
        return null;
    }

    const discount = 0.35; // 35% discount.  Adjust as needed.
    const suggestedPurchasePrice = minSellPrice * (1 - discount);
    return suggestedPurchasePrice.toFixed(2); // Format to 2 decimal places
};

const suggestedPurchasePrice = calculateSuggestedPurchasePrice(aiAnalysis);



// ... later, inside the return, specifically when view === "table":

{inWatchlist && (
  <div className="flex-shrink-0 w-32">
   <div className="text-sm font-medium">
    ${suggestedPurchasePrice}
</div>
    <div className="text-xs text-muted-foreground">
        Suggested Purchase
    </div>
  </div>
)}

//And now, inside the price area when not table view
  {inWatchlist && suggestedPurchasePrice ? (
              <div className="text-xs text-muted-foreground">
                  Suggested Purchase: ${suggestedPurchasePrice}
               </div>
            ) : (
                <div className="text-xs text-muted-foreground">
                  {inWatchlist ? "Recommended" : "Selling Price"}
                </div>
)}
Use code with caution.
TypeScript
Add the suggestedPurchasePrice variable before the return statement in your ProductCard component. Calculate it conditionally, only if inWatchlist is true and the aiAnalysis data is valid.

Add the JSX to display the suggested purchase price only when inWatchlist is true. A good place is within the Pricing section, perhaps below the "Recommended" price.

client/src/components/convert-watchlist-dialog.tsx:

Remove the pre-population of the recommendedSalePrice field in the defaultValues of the useForm hook. The buyPrice should still default to 0.

const {
  register,
  handleSubmit,
  setValue,
  getValues,
  watch,
  reset,
  formState: { isSubmitting },
} = useForm<ConvertWatchlistFormData>({
  defaultValues: {
    buyPrice: 0,  // Keep this.
    recommendedSalePrice: 0, // Remove the pre-population from product.price
  },
});
Use code with caution.
TypeScript
In the onSubmit of the dialog, change price: data.recommendedSalePrice to price: product.price and also add purchasePrice.
```ts
const updateResponse = await apiRequest("PATCH", /api/products/${product.id}, {
price: product.price, // Use the price from the product data
purchasePrice: data.buyPrice, //ADD THIS - saves the purchase price
quantity: 1,
sold: false,
});

Use code with caution.
Database schema (db/schema.ts): You'll need that field in your database!

export const products = pgTable("products", {
 // ... other fields ...
   purchasePrice: decimal("purchase_price", { precision: 10, scale: 2 }), // Add this
 // ... rest of the table definition ...
 });
Use code with caution.
Ts
Then re-migrate.
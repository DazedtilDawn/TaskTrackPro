1. Add a “Full Analysis” Toggle
State Setup:
In your ProductForm component, add a state variable (for example, fullAnalysis) to track whether the full chain should run. Use your UI’s existing toggle (such as your <Switch> component) to let the user choose whether to run the complete analysis chain automatically.

UI Placement:
Place the toggle alongside your analysis buttons (for example, in your analysis toolbar) with a label like “Full Analysis (Run all steps).”

2. Chain the Analysis Functions Together
Rather than having the user click “Analyze Product,” then “Refine with eBay,” then “Refine Pricing” separately, create a new helper function that runs them sequentially. For example:

tsx
Copy
async function runFullAnalysis() {
  try {
    await handleAnalyze(); // Initial AI analysis
    await handleRefineWithEbay(); // eBay data refinement
    await handleRefinePricing(); // Price refinement based on AI and eBay
  } catch (error) {
    // Optionally re‑throw or handle the error so that the user can be notified
    console.error("Full analysis chain failed:", error);
    throw error;
  }
}
3. Modify the Analysis Completion Handler
After your image analysis (or initial AI analysis) completes, update your form values as before. Then, if the toggle is enabled, immediately call your chain helper to run the remaining steps. For example:

tsx
Copy
const handleAnalysisComplete = async (analysis: any) => {
  // Set initial AI analysis values into the form:
  form.setValue("aiAnalysis", analysis);
  if (analysis.title) form.setValue("name", analysis.title);
  if (analysis.description) form.setValue("description", analysis.description);
  if (analysis.category) form.setValue("category", analysis.category);
  if (analysis.marketAnalysis?.priceSuggestion?.min) {
    const condition = form.getValues("condition");
    const conditionData = conditionOptions.find(opt => opt.value === condition);
    const conditionDiscount = conditionData?.discount ?? 1;
    const adjustedPrice = Math.floor(analysis.marketAnalysis.priceSuggestion.min * conditionDiscount);
    form.setValue("price", adjustedPrice);
  }
  setShowSmartListing(false);
  toast({
    title: "Analysis Complete",
    description: "Product details have been analyzed from images",
  });

  // If full analysis is enabled, chain the additional steps:
  if (fullAnalysis) {
    try {
      await runFullAnalysis();
      toast({
        title: "Full Analysis Complete",
        description: "eBay data and price refinements have been applied.",
      });
    } catch (chainError) {
      toast({
        title: "Full Analysis Error",
        description: chainError instanceof Error ? chainError.message : "An error occurred during full analysis.",
        variant: "destructive",
      });
    }
  }
};
4. Integrate the Toggle into the Analysis Toolbar
Update your analysis toolbar UI so that the toggle is rendered alongside the existing buttons. For example:

tsx
Copy
const AnalysisToolbar = ({ isAnalyzing, isLoadingEbay, isRefiningPrice, hasEbayAuth, form }: AnalysisToolbarProps) => (
  <div className="flex flex-wrap gap-2 items-center mb-4">
    <Button
      type="button"
      variant="outline"
      onClick={fullAnalysis ? runFullAnalysis : handleAnalyze}
      disabled={isAnalyzing || !form.getValues("name") || !form.getValues("description")}
      className="gap-2"
    >
      {isAnalyzing ? <Loader2 className="h-4 w-4 animate-spin" /> : <Sparkles className="h-4 w-4" />}
      {fullAnalysis ? "Run Full Analysis" : "Analyze Product"}
    </Button>
    {hasEbayAuth && (
      <Button
        type="button"
        variant="outline"
        onClick={handleRefineWithEbay}
        disabled={isLoadingEbay || !form.getValues("aiAnalysis")}
        className="gap-2"
      >
        {isLoadingEbay ? <Loader2 className="h-4 w-4 animate-spin" /> : <BarChart2 className="h-4 w-4" />}
        Refine with eBay
      </Button>
    )}
    {form.getValues("aiAnalysis")?.ebayData && (
      <Button
        type="button"
        variant="outline"
        onClick={handleRefinePricing}
        disabled={isRefiningPrice}
        className="gap-2"
      >
        {isRefiningPrice ? <Loader2 className="h-4 w-4 animate-spin" /> : <TrendingUp className="h-4 w-4" />}
        Refine Pricing
      </Button>
    )}
    {/* New toggle for full analysis */}
    <div className="flex items-center gap-1">
      <Switch
        checked={fullAnalysis}
        onCheckedChange={(checked) => setFullAnalysis(!!checked)}
      />
      <span className="text-sm">Full Analysis</span>
    </div>
  </div>
);
Note: In this snippet, the primary “Analyze Product” button’s onClick changes behavior based on whether the fullAnalysis toggle is on. You could also leave the buttons separate and simply have the toggle control the behavior of the handleAnalysisComplete function.

5. Error Handling and User Feedback Improvements
Disable Controls:
While the full analysis chain is running, disable all relevant buttons so that the user cannot trigger additional calls.

Spinner/Progress Indicators:
Consider adding a progress indicator (or spinner) that informs the user that multiple steps are running in sequence.

Step‑by‑Step Error Handling:
In the runFullAnalysis helper, wrap each step in its own try‑catch block if you want to provide step‑specific errors or allow partial results. For example:

tsx
Copy
async function runFullAnalysis() {
  try {
    await handleAnalyze();
  } catch (error) {
    toast({ title: "Initial Analysis Error", description: error instanceof Error ? error.message : "Error", variant: "destructive" });
    throw error;
  }
  try {
    await handleRefineWithEbay();
  } catch (error) {
    toast({ title: "eBay Analysis Error", description: error instanceof Error ? error.message : "Error", variant: "destructive" });
    throw error;
  }
  try {
    await handleRefinePricing();
  } catch (error) {
    toast({ title: "Price Refinement Error", description: error instanceof Error ? error.message : "Error", variant: "destructive" });
    throw error;
  }
}
This way, if one step fails, you can notify the user of the specific failure.

Full Updated Process Summary
Add a Full Analysis Toggle:
– In ProductForm, add a fullAnalysis state and a toggle control (e.g. using your <Switch>) labeled “Full Analysis.”

Chain Analysis Functions:
– Create a helper function (runFullAnalysis) that calls:

handleAnalyze() (initial AI analysis)
handleRefineWithEbay() (eBay market data refinement)
handleRefinePricing() (price refinement) – Ensure each step is wrapped in error handling.
Modify Analysis Completion Handler:
– In your handleAnalysisComplete, set the AI analysis values as before.
– Then, if fullAnalysis is enabled, automatically call the chain helper to run the remaining steps.
– Provide appropriate user notifications (via your toast messages) based on success or failure.

Integrate the Toggle in the Toolbar:
– Update your Analysis Toolbar UI to display the toggle alongside the analysis buttons.
– Optionally change the primary analysis button’s behavior based on the toggle state.

Enhance Error Handling and User Feedback:
– Disable buttons and show spinners or progress indicators while the full chain is running.
– Provide detailed error messages for each step if a step fails, so the user knows what went wrong.

This updated process makes your analysis flow more robust and user‑friendly by automating multiple steps when desired while handling errors gracefully and providing clear feedback to the user. Let me know if you need further clarification or additional refinements!
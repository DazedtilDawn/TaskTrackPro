Below is a concise checklist to verify and improve the `client/src/pages/watchlist.tsx` page:

---

### **Data Fetching & Display**
- [ ] **Fetch Watchlist Items:**
  - Confirm that `useQuery` is using the `/api/watchlist` endpoint and returns an array of watchlist items (with embedded product data).
  - Ensure the watchlist item type (`WatchlistItem`) includes a valid `product` property.
- [ ] **Filtering & Search:**
  - Verify that the search input correctly updates the `search` state.
  - Ensure that filtering works by matching the search term against the product's name and SKU (case-insensitive).

---

### **Watchlist Add/Remove Functionality**
- [ ] **Remove Functionality:**
  - Check that the `handleDelete` function sends a DELETE request to the correct endpoint using the product's ID.
  - Ensure that after removal, the watchlist and products queries are invalidated and the user receives a toast notification.
- [ ] **Toggle Behavior:**
  - Verify that `toggleWatchlist` correctly calls `handleDelete` (removing items from the watchlist).
  - Confirm that any errors during removal are caught and displayed via toast notifications.

---

### **Product Adding Logic**
- [ ] **Dialog & Form Opening:**
  - Ensure that clicking the "Add Product" button opens the dialog by setting `isDialogOpen` to `true`.
  - Confirm that the dialog displays the `<ProductForm>` component.
- [ ] **Flagging as Watchlist Item:**
  - Verify that `<ProductForm>` receives the prop `isWatchlistItem={true}` so that products added via this dialog are correctly flagged.
- [ ] **Dialog Closing:**
  - Ensure that the `onComplete` callback (passed to `<ProductForm>`) resets the selected product and closes the dialog.

---

### **UI Components & Layout**
- [ ] **View Modes:**
  - Confirm that the page correctly switches between table, grid, and list views using the `ViewToggle` component.
  - Verify that both `<ProductCard>` and `<ProductTable>` receive the `inWatchlist={true}` flag so they display watchlist-specific UI.
- [ ] **Empty State Handling:**
  - Ensure that when there are no items in the filtered watchlist, a friendly empty state message (with an icon and descriptive text) is displayed.

---

### **User Feedback & State Management**
- [ ] **Toast Notifications:**
  - Check that toast messages are displayed upon successful removal, addition, or errors.
- [ ] **Query Invalidation:**
  - Ensure that after any add/remove action, the relevant queries (`/api/watchlist` and `/api/products`) are invalidated so that the UI reflects the latest data.
- [ ] **Consistent State Updates:**
  - Verify that state variables (e.g., `search`, `isDialogOpen`, `selectedProduct`, and view preference) update correctly and do not trigger unnecessary re-renders.

---

Following this checklist will help ensure that the watchlist page fetches and displays data properly, the add/remove functionality works as expected, and the product addition process correctly marks new items as watchlist entries.
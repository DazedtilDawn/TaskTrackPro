Issue Recap:
Client-side:
Optimistic UI updates in functions such as toggleWatchlist, deleteProduct, and in the form submission in ProductForm are triggered before the server confirms the operation.
markAsSold is also updating UI prematurely.
Server-side:
The DELETE endpoint for products doesn’t handle the situation where the product exists only as a watchlist item.
Plan to Resolve:
Implementation
Client-Side Changes:
Use Mutations for State Changes:
Refactor toggleWatchlist, deleteProduct, and markAsSold in ProductCard.tsx to use useMutation (or ensure that the mutation’s onSuccess callback is used) so that UI updates (toasts and query invalidations) occur only after a successful API response.
Form Submission in ProductForm:
In the submission handler of ProductForm, update the UI (e.g., call queryClient.invalidateQueries and show success toasts) only after confirming that the POST/PATCH request succeeded.
Error Handling:
If the API call fails, roll back or display a clear error message and do not update the UI optimistically.
Server-Side Changes:
Product DELETE Endpoint:
In the DELETE handler for /api/products/:id, add logic to check if the product exists as a full inventory item.
If the product is found only in the watchlist (or if a deletion request should only remove the watchlist reference), adjust the deletion logic accordingly (e.g., delete only the watchlist record if appropriate).
Review Other Interactions:
Check markAsSold to ensure that it also waits for the server’s confirmation before navigating or updating UI.
Testing
Unit Testing:
Mock apiRequest in tests for ProductCard and ProductForm so that you can simulate both successful responses and errors. Verify that the UI only updates (toasts and query invalidations) on success.
Integration Testing:
Write tests that simulate creating, updating, and deleting products. Verify that the database state (both in the products and watchlist tables) is consistent and that the UI accurately reflects the server state.
End-to-End (E2E) Testing:
Test the full user flow: add a product, add it to the watchlist, mark it as sold, and delete it. Also test edge cases (e.g., deleting a product that only exists on the watchlist).
Deployment
Deploy Server Changes First:
Deploy the modified DELETE endpoint and any other necessary backend logic.
Deploy Client Changes:
Roll out the revised components (ProductCard, ProductForm, etc.) together so that the UI behavior matches the backend expectations.
Monitor:
Observe logs and user feedback (or use your error tracking system) to confirm that race conditions or optimistic update issues are resolved.
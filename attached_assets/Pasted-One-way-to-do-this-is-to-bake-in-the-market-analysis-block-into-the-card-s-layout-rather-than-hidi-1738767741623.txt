One way to do this is to “bake in” the market analysis block into the card’s layout rather than hiding it behind a button or popover. For example, if your current ProductCard component renders the market analysis details in a popover (so the user must click the sparkles icon to see them), you can refactor that section to be rendered inline. Here’s a simplified strategy:

1. **Remove the Popover wrapper:**  
   Instead of wrapping the market analysis details inside a `<Popover>` (or similar component), you can render that block directly as part of the card’s content.

2. **Place the Analysis Block in the Layout:**  
   Decide where you want these details to appear. For example, you might display them immediately below the product description or in a dedicated “analysis” section of the card. You can also conditionally render this block only when the analysis is available.

3. **Style Appropriately:**  
   You might need to adjust your CSS or Tailwind classes so that the analysis block integrates nicely into your card layout without overwhelming the design.

---

### Example Code Changes

Assume your current ProductCard component looks roughly like this (excerpt):

```tsx
export default function ProductCard({ product, onEdit, inWatchlist, view = "grid" }: ProductCardProps) {
  // ...existing state and parsing of aiAnalysis
  const hasAnalysis = aiAnalysis && Object.keys(aiAnalysis).length > 0;

  // Existing inline variables for pricing status etc.
  const currentPrice = Number(product.price) || 0;
  const isUnderpriced = hasAnalysis && currentPrice < (aiAnalysis?.marketAnalysis?.priceSuggestion?.min ?? 0);
  const isOverpriced = hasAnalysis && currentPrice > (aiAnalysis?.marketAnalysis?.priceSuggestion?.max ?? 0);
  const isPricedRight = hasAnalysis && !isUnderpriced && !isOverpriced;

  return view === "table" ? (
    // ...table view rendering
  ) : (
    <Card className="...">
      {product.imageUrl && (
        <div className={cn("relative", view === "grid" ? "w-full" : "w-48 shrink-0")}>
          <img src={product.imageUrl} alt={product.name} className={cn(view === "grid" ? "w-full h-48" : "w-48 h-full")} />
          {hasAnalysis && (
            <div className={cn(
              "absolute top-2 right-2 px-2 py-1 rounded-full text-xs font-medium",
              isUnderpriced && "bg-yellow-500/90 text-yellow-50",
              isOverpriced && "bg-red-500/90 text-red-50",
              isPricedRight && "bg-green-500/90 text-green-50"
            )}>
              {isUnderpriced ? 'Underpriced' : isOverpriced ? 'Overpriced' : 'Optimal Price'}
            </div>
          )}
        </div>
      )}
      <div className={cn(view === "list" && "flex-1 flex flex-col")}>
        <CardContent className={cn("p-4", view === "list" && "flex-1")}>
          <h3 className="font-semibold text-lg mb-2">{product.name}</h3>
          <p className="text-muted-foreground text-sm">{product.description}</p>
          
          {/* Inline Market Analysis Details */}
          {hasAnalysis && aiAnalysis && (
            <div className="mt-4 border-t pt-4">
              <h4 className="text-lg font-semibold">Market Analysis</h4>
              <p className="text-sm text-muted-foreground">
                Category: {aiAnalysis.category}
              </p>
              {aiAnalysis.marketAnalysis && (
                <div className="mt-2 space-y-2">
                  <div className="flex items-center gap-2">
                    <span className="text-sm font-medium">Demand Score:</span>
                    <span className="text-sm">{aiAnalysis.marketAnalysis.demandScore}/100</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="text-sm font-medium">Competition:</span>
                    <span className="text-sm">{aiAnalysis.marketAnalysis.competitionLevel}</span>
                  </div>
                  {aiAnalysis.marketAnalysis.priceSuggestion && (
                    <div className="flex items-center gap-2">
                      <span className="text-sm font-medium">Price Range:</span>
                      <span className="text-sm">
                        ${aiAnalysis.marketAnalysis.priceSuggestion.min.toFixed(2)} - ${aiAnalysis.marketAnalysis.priceSuggestion.max.toFixed(2)}
                      </span>
                    </div>
                  )}
                </div>
              )}
              {aiAnalysis.suggestions && (
                <div className="mt-4">
                  <h5 className="font-medium">Optimization Tips</h5>
                  <ul className="list-disc pl-5 text-sm text-muted-foreground">
                    {aiAnalysis.suggestions.map((suggestion: string, index: number) => (
                      <li key={index}>{suggestion}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          )}
        </CardContent>
        {/* CardFooter or additional sections could go here */}
      </div>
    </Card>
  );
}
```

---

### Explanation

- **Inline Rendering:**  
  Instead of wrapping the market analysis inside a `<Popover>`, the code above renders the market analysis details (such as category, demand score, competition level, and price suggestion) directly within the `<CardContent>` of the product card.

- **Conditional Rendering:**  
  The block is wrapped in a conditional check (`{hasAnalysis && aiAnalysis && (...)}`) so it only shows when valid analysis data exists.

- **Styling:**  
  The analysis block is separated from the rest of the content by a top border and some vertical spacing (`mt-4 border-t pt-4`), giving it its own section without requiring an extra click.

You can further adjust the layout and styling to fit your design requirements. This approach will let users see the market analysis as soon as they view the product card, without needing to click any additional button.

Let me know if you need further assistance or refinements!